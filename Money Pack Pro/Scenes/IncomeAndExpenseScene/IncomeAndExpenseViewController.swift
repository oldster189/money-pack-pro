//
//  IncomeAndExpenseViewController.swift
//  Money Pack Pro
//
//  Created by itthipon wiwatthanasathit on 10/13/2560 BE.
//  Copyright (c) 2560 Dev7. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Foundation
import Kingfisher

protocol IncomeAndExpenseDisplayLogic: class
{
  func displayFetchedItemTypes(viewModel: IncomeAndExpense.FetchItemType.ViewModel)
}

class IncomeAndExpenseViewController: UIViewController, IncomeAndExpenseDisplayLogic
{
  
  
  var interactor: IncomeAndExpenseBusinessLogic?
  var router: (NSObjectProtocol & IncomeAndExpenseRoutingLogic & IncomeAndExpenseDataPassing)?
  
  var displayedItemTypes: [IncomeAndExpense.FetchItemType.ViewModel.DisplayedItemType] = []
  var mTypeSelectArray:[IncomeAndExpense.FetchItemType.ViewModel.DisplayedItemType] = []
  
  var valueMoney:[String] = ["0",".","0","0"]
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = IncomeAndExpenseInteractor()
    let presenter = IncomeAndExpensePresenter()
    let router = IncomeAndExpenseRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    initTableView()
    fetchItemType()
  }
  
  @IBOutlet weak var mExpensesLabel: UILabel!
  @IBOutlet weak var mTableView: UITableView!{
    didSet{
      mTableView.alpha = 1.0
    }
  }
  
  func initTableView(){
    mTableView.register(ItemTypeViewCell.self)
  }
  
  func fetchItemType()
  {
    let request = IncomeAndExpense.FetchItemType.Request()
    interactor?.fetchItemType(request: request)
  }
  
  func displayFetchedItemTypes(viewModel: IncomeAndExpense.FetchItemType.ViewModel)
  {
    displayedItemTypes = viewModel.displayedItemTypes
    mTableView.reloadData()
    UIView.animate(withDuration: 0.5) {
      self.mTableView.alpha = 1.0
    }
  }
  
  @IBAction func onClickInputMoney(_ sender: UIButton){
    let tag = sender.tag
    switch tag {
    case PAD_ZERO...PAD_NINE:
      valueMoney.append("\(tag)")
    case PAD_CANCEL:
      valueMoney.removeAll()
      valueMoney = ["0",".","0","0"]
    case PAD_DELETE:
      valueMoney.removeLast()
    case PAD_CARD:
      print("Card")
    case PAD_CASH:
      print("Cash")
    default:
      print("Other")
    }
    
    if valueMoney.count > 2 {
      
      // ลบ . ออก เพื่อเคลียร์ตำแหน่ง และ เพิ่ม . ใหม่
      if let index = valueMoney.index(where: {$0 == "."}){
        valueMoney.remove(at: index)
      }
      
      // ลบเลข 0 ตัวแรกเพื่อเคลียร์เพราะไม่มีค่า
      if valueMoney[0] == "0" {
        valueMoney.remove(at: 0)
      }
      
      // เพิ่มเลข 0 ถ้าข้อมูลไม่ครบ format 0.00 เช่น .23
      // หลังลบ . ออก count = 2
      if valueMoney.count == 2 {
        valueMoney.insert("0", at: 0)
      }else if valueMoney.count == 1 {
        valueMoney.insert("0", at: 0)
        valueMoney.insert("0", at: 0)
      }
      
      //หลังจากทำตัวเลขครบ format แล้ว เติม . ที่ตำแหน่งที่ 3 นับจากข้างหลัง
      valueMoney.insert(".", at: valueMoney.count - 2)
    }
    
    // รวม Array ให้เป็นก้อนเดียว และทำให้เป็น format #,###.## เพื่อแสดงข้อมูล
    if let number = Double(valueMoney.joined()) {
      mExpensesLabel.text = number.format(f: "2")
    }
    
  }
}

//MARK:- OnClick
extension IncomeAndExpenseViewController{
  
}

//MARK:- UITableViewDelegate, UITableVIewDatasource
extension IncomeAndExpenseViewController: UITableViewDelegate, UITableViewDataSource {
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return displayedItemTypes.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let displayedItemType = displayedItemTypes[indexPath.row]
    
    let cell:ItemTypeViewCell = tableView.dequeueReusableCell(forIndexPath: indexPath)
    cell.selectionStyle = .none
    
    let image = UIImage(named: displayedItemType.nameImage)
    cell.mTypeImage.setImage(image, for: .normal)
    cell.mTypeNameLabel.text = displayedItemType.descImage
    cell.mTypeImage.backgroundColor = displayedItemType.colorImage
    
    //เช็คข้อมูล เพื่อแสดงไอคอน ว่าเลือกแล้ว
    if let _ = mTypeSelectArray.index(where: {$0.nameImage == displayedItemType.nameImage}){
      cell.mCorrectImage.alpha = 1
    }else{
      cell.mCorrectImage.alpha = 0
    }
    
    return cell
  }
  
  
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    let displayedItemType = displayedItemTypes[indexPath.row]
    tableView.deselectRow(at: indexPath, animated: true)
    
    // เช็คว่ามีข้อมูลที่ถูกเลือกหรือไม่ ถ้ามีลบออก ถ้าไม่มีเพิ่มเข้าไป
    if let index = mTypeSelectArray.index(where: {$0.nameImage == displayedItemType.nameImage}){
      mTypeSelectArray.remove(at: index)
    }else{
      mTypeSelectArray.append(displayedItemType)
    }
    
//    mTableView.reloadRows(at: [IndexPath(row: indexPath.row, section: indexPath.section)], with: UITableViewRowAnimation.none)
   
    mTableView.reloadData()
  }
  
  
}
